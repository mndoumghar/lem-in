package movement

import (

	"fmt"
	"strings"
)

type Ant struct {
	id       int
	path     []string
	position int
}

func SimulateAntMovement(paths [][]string, antCount int) {
	ants := []Ant{}
	finished := 0
	step := 0
	nextAntID := 1

	for finished < antCount {
		step++
		moves := []string{}

		// توزيع نمل جديد على المسارات بالتناوب
		for i := 0; i < len(paths) && nextAntID <= antCount; i++ {
			ants = append(ants, Ant{
				id:       nextAntID,
				path:     paths[i],
				position: -1,
			})
			nextAntID++
		}

		// تحريك جميع النملات
		for i := range ants {
			ant := &ants[i]
			if ant.position < len(ant.path)-1 {
				ant.position++
				room := ant.path[ant.position]
				moves = append(moves, fmt.Sprintf("L%d-%s", ant.id, room))
			}
		}

		// نحسب عدد اللي وصلو للنهاية
		finished = 0
		for _, ant := range ants {
			if ant.position == len(ant.path)-1 {
				finished++
			}
		}

		// نطبع الحركة ديال هاد الستيب
		if len(moves) > 0 {
			fmt.Println(strings.Join(moves, " "))
		}
	}
}
